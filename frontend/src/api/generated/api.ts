/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BusinessTripRequestDto
 */
export interface BusinessTripRequestDto {
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'dateTo': string;
    /**
     * 
     * @type {number}
     * @memberof BusinessTripRequestDto
     */
    'cost': number;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'destination': string;
    /**
     * 
     * @type {boolean}
     * @memberof BusinessTripRequestDto
     */
    'approval': boolean;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface FormDataDto
 */
export interface FormDataDto {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FormDataDto
     */
    'schema': { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FormDataDto
     */
    'uiSchema': { [key: string]: object; };
    /**
     * 
     * @type {BusinessTripRequestDto}
     * @memberof FormDataDto
     */
    'data': BusinessTripRequestDto;
}

/**
 * StartProcessControllerApi - axios parameter creator
 * @export
 */
export const StartProcessControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BusinessTripRequestDto} businessTripRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startProcess: async (businessTripRequestDto: BusinessTripRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessTripRequestDto' is not null or undefined
            assertParamExists('startProcess', 'businessTripRequestDto', businessTripRequestDto)
            const localVarPath = `/rest/process/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessTripRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StartProcessControllerApi - functional programming interface
 * @export
 */
export const StartProcessControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StartProcessControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BusinessTripRequestDto} businessTripRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startProcess(businessTripRequestDto: BusinessTripRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startProcess(businessTripRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StartProcessControllerApi.startProcess']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StartProcessControllerApi - factory interface
 * @export
 */
export const StartProcessControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StartProcessControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BusinessTripRequestDto} businessTripRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startProcess(businessTripRequestDto: BusinessTripRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.startProcess(businessTripRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StartProcessControllerApi - object-oriented interface
 * @export
 * @class StartProcessControllerApi
 * @extends {BaseAPI}
 */
export class StartProcessControllerApi extends BaseAPI {
    /**
     * 
     * @param {BusinessTripRequestDto} businessTripRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartProcessControllerApi
     */
    public startProcess(businessTripRequestDto: BusinessTripRequestDto, options?: RawAxiosRequestConfig) {
        return StartProcessControllerApiFp(this.configuration).startProcess(businessTripRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskControllerApi - axios parameter creator
 * @export
 */
export const TaskControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {BusinessTripRequestDto} businessTripRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: async (taskId: string, businessTripRequestDto: BusinessTripRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('complete', 'taskId', taskId)
            // verify required parameter 'businessTripRequestDto' is not null or undefined
            assertParamExists('complete', 'businessTripRequestDto', businessTripRequestDto)
            const localVarPath = `/rest/task/{taskId}/complete`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessTripRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('load', 'taskId', taskId)
            const localVarPath = `/rest/task/{taskId}/load`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskControllerApi - functional programming interface
 * @export
 */
export const TaskControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {BusinessTripRequestDto} businessTripRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complete(taskId: string, businessTripRequestDto: BusinessTripRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complete(taskId, businessTripRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskControllerApi.complete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async load(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.load(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskControllerApi.load']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskControllerApi - factory interface
 * @export
 */
export const TaskControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {BusinessTripRequestDto} businessTripRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete(taskId: string, businessTripRequestDto: BusinessTripRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.complete(taskId, businessTripRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<FormDataDto> {
            return localVarFp.load(taskId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskControllerApi - object-oriented interface
 * @export
 * @class TaskControllerApi
 * @extends {BaseAPI}
 */
export class TaskControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} taskId 
     * @param {BusinessTripRequestDto} businessTripRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public complete(taskId: string, businessTripRequestDto: BusinessTripRequestDto, options?: RawAxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).complete(taskId, businessTripRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public load(taskId: string, options?: RawAxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).load(taskId, options).then((request) => request(this.axios, this.basePath));
    }
}



