/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'zipCode'?: string;
}
/**
 * 
 * @export
 * @interface BusinessTripRequestDetailedDto
 */
export interface BusinessTripRequestDetailedDto {
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'salutation': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'mail': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'iban': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'tripType': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'startPoint': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'startTime'?: string;
    /**
     * 
     * @type {Address}
     * @memberof BusinessTripRequestDetailedDto
     */
    'address'?: Address;
    /**
     * 
     * @type {Array<Destination>}
     * @memberof BusinessTripRequestDetailedDto
     */
    'destinations': Array<Destination>;
    /**
     * 
     * @type {Destination}
     * @memberof BusinessTripRequestDetailedDto
     */
    'finalDestination': Destination;
    /**
     * 
     * @type {boolean}
     * @memberof BusinessTripRequestDetailedDto
     */
    'approval': boolean;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDetailedDto
     */
    'approvalComment': string;
}
/**
 * 
 * @export
 * @interface BusinessTripRequestDto
 */
export interface BusinessTripRequestDto {
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'dateTo': string;
    /**
     * 
     * @type {number}
     * @memberof BusinessTripRequestDto
     */
    'cost': number;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'destination': string;
    /**
     * 
     * @type {boolean}
     * @memberof BusinessTripRequestDto
     */
    'approval': boolean;
    /**
     * 
     * @type {string}
     * @memberof BusinessTripRequestDto
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface Destination
 */
export interface Destination {
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'time'?: string;
}
/**
 * 
 * @export
 * @interface FormDataDto
 */
export interface FormDataDto {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FormDataDto
     */
    'schema': { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FormDataDto
     */
    'uiSchema': { [key: string]: object; };
    /**
     * 
     * @type {BusinessTripRequestDetailedDto}
     * @memberof FormDataDto
     */
    'data': BusinessTripRequestDetailedDto;
}

/**
 * BusinessTripDecisionControllerApi - axios parameter creator
 * @export
 */
export const BusinessTripDecisionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {BusinessTripRequestDetailedDto} businessTripRequestDetailedDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: async (taskId: string, businessTripRequestDetailedDto: BusinessTripRequestDetailedDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('complete', 'taskId', taskId)
            // verify required parameter 'businessTripRequestDetailedDto' is not null or undefined
            assertParamExists('complete', 'businessTripRequestDetailedDto', businessTripRequestDetailedDto)
            const localVarPath = `/rest/task/{taskId}/complete`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessTripRequestDetailedDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('load', 'taskId', taskId)
            const localVarPath = `/rest/task/{taskId}/load`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessTripDecisionControllerApi - functional programming interface
 * @export
 */
export const BusinessTripDecisionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessTripDecisionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {BusinessTripRequestDetailedDto} businessTripRequestDetailedDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complete(taskId: string, businessTripRequestDetailedDto: BusinessTripRequestDetailedDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complete(taskId, businessTripRequestDetailedDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessTripDecisionControllerApi.complete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async load(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.load(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessTripDecisionControllerApi.load']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BusinessTripDecisionControllerApi - factory interface
 * @export
 */
export const BusinessTripDecisionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessTripDecisionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} taskId 
         * @param {BusinessTripRequestDetailedDto} businessTripRequestDetailedDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete(taskId: string, businessTripRequestDetailedDto: BusinessTripRequestDetailedDto, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.complete(taskId, businessTripRequestDetailedDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<FormDataDto> {
            return localVarFp.load(taskId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessTripDecisionControllerApi - object-oriented interface
 * @export
 * @class BusinessTripDecisionControllerApi
 * @extends {BaseAPI}
 */
export class BusinessTripDecisionControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} taskId 
     * @param {BusinessTripRequestDetailedDto} businessTripRequestDetailedDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTripDecisionControllerApi
     */
    public complete(taskId: string, businessTripRequestDetailedDto: BusinessTripRequestDetailedDto, options?: RawAxiosRequestConfig) {
        return BusinessTripDecisionControllerApiFp(this.configuration).complete(taskId, businessTripRequestDetailedDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTripDecisionControllerApi
     */
    public load(taskId: string, options?: RawAxiosRequestConfig) {
        return BusinessTripDecisionControllerApiFp(this.configuration).load(taskId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BusinessTripRequestControllerApi - axios parameter creator
 * @export
 */
export const BusinessTripRequestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startProcess1: async (body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('startProcess1', 'body', body)
            const localVarPath = `/rest/process/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessTripRequestControllerApi - functional programming interface
 * @export
 */
export const BusinessTripRequestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessTripRequestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startProcess1(body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startProcess1(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessTripRequestControllerApi.startProcess1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BusinessTripRequestControllerApi - factory interface
 * @export
 */
export const BusinessTripRequestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessTripRequestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startProcess1(body: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.startProcess1(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessTripRequestControllerApi - object-oriented interface
 * @export
 * @class BusinessTripRequestControllerApi
 * @extends {BaseAPI}
 */
export class BusinessTripRequestControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTripRequestControllerApi
     */
    public startProcess1(body: string, options?: RawAxiosRequestConfig) {
        return BusinessTripRequestControllerApiFp(this.configuration).startProcess1(body, options).then((request) => request(this.axios, this.basePath));
    }
}



